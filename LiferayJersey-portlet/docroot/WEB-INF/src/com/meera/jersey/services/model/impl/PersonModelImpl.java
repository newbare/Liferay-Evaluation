/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.meera.jersey.services.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.meera.jersey.services.model.Person;
import com.meera.jersey.services.model.PersonModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Person service. Represents a row in the &quot;meera_Person&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.meera.jersey.services.model.PersonModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PersonImpl}.
 * </p>
 *
 * @author meera
 * @see PersonImpl
 * @see com.meera.jersey.services.model.Person
 * @see com.meera.jersey.services.model.PersonModel
 * @generated
 */
public class PersonModelImpl extends BaseModelImpl<Person>
	implements PersonModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a person model instance should use the {@link com.meera.jersey.services.model.Person} interface instead.
	 */
	public static final String TABLE_NAME = "meera_Person";
	public static final Object[][] TABLE_COLUMNS = {
			{ "personId", Types.BIGINT },
			{ "personName", Types.VARCHAR },
			{ "personAddress", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table meera_Person (personId LONG not null primary key,personName VARCHAR(75) null,personAddress VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table meera_Person";
	public static final String ORDER_BY_JPQL = " ORDER BY person.personId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY meera_Person.personId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.meera.jersey.services.model.Person"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.meera.jersey.services.model.Person"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.meera.jersey.services.model.Person"));

	public PersonModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _personId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPersonId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _personId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Person.class;
	}

	@Override
	public String getModelClassName() {
		return Person.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("personId", getPersonId());
		attributes.put("personName", getPersonName());
		attributes.put("personAddress", getPersonAddress());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long personId = (Long)attributes.get("personId");

		if (personId != null) {
			setPersonId(personId);
		}

		String personName = (String)attributes.get("personName");

		if (personName != null) {
			setPersonName(personName);
		}

		String personAddress = (String)attributes.get("personAddress");

		if (personAddress != null) {
			setPersonAddress(personAddress);
		}
	}

	@Override
	public long getPersonId() {
		return _personId;
	}

	@Override
	public void setPersonId(long personId) {
		_personId = personId;
	}

	@Override
	public String getPersonName() {
		if (_personName == null) {
			return StringPool.BLANK;
		}
		else {
			return _personName;
		}
	}

	@Override
	public void setPersonName(String personName) {
		_personName = personName;
	}

	@Override
	public String getPersonAddress() {
		if (_personAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _personAddress;
		}
	}

	@Override
	public void setPersonAddress(String personAddress) {
		_personAddress = personAddress;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Person.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Person toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Person)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PersonImpl personImpl = new PersonImpl();

		personImpl.setPersonId(getPersonId());
		personImpl.setPersonName(getPersonName());
		personImpl.setPersonAddress(getPersonAddress());

		personImpl.resetOriginalValues();

		return personImpl;
	}

	@Override
	public int compareTo(Person person) {
		long primaryKey = person.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Person)) {
			return false;
		}

		Person person = (Person)obj;

		long primaryKey = person.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Person> toCacheModel() {
		PersonCacheModel personCacheModel = new PersonCacheModel();

		personCacheModel.personId = getPersonId();

		personCacheModel.personName = getPersonName();

		String personName = personCacheModel.personName;

		if ((personName != null) && (personName.length() == 0)) {
			personCacheModel.personName = null;
		}

		personCacheModel.personAddress = getPersonAddress();

		String personAddress = personCacheModel.personAddress;

		if ((personAddress != null) && (personAddress.length() == 0)) {
			personCacheModel.personAddress = null;
		}

		return personCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{personId=");
		sb.append(getPersonId());
		sb.append(", personName=");
		sb.append(getPersonName());
		sb.append(", personAddress=");
		sb.append(getPersonAddress());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.meera.jersey.services.model.Person");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>personId</column-name><column-value><![CDATA[");
		sb.append(getPersonId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>personName</column-name><column-value><![CDATA[");
		sb.append(getPersonName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>personAddress</column-name><column-value><![CDATA[");
		sb.append(getPersonAddress());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Person.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Person.class };
	private long _personId;
	private String _personName;
	private String _personAddress;
	private Person _escapedModel;
}