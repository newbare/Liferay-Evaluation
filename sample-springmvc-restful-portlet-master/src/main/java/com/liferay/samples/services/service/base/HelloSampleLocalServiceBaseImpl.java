package com.liferay.samples.services.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.liferay.samples.services.model.HelloSample;
import com.liferay.samples.services.service.HelloSampleLocalService;
import com.liferay.samples.services.service.persistence.HelloSamplePersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the hello sample local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.samples.services.service.impl.HelloSampleLocalServiceImpl}.
 * </p>
 *
 * @author Liferay
 * @see com.liferay.samples.services.service.impl.HelloSampleLocalServiceImpl
 * @see com.liferay.samples.services.service.HelloSampleLocalServiceUtil
 * @generated
 */
public abstract class HelloSampleLocalServiceBaseImpl
    extends BaseLocalServiceImpl implements HelloSampleLocalService,
        IdentifiableBean {
    @BeanReference(type = com.liferay.samples.services.service.HelloSampleLocalService.class)
    protected com.liferay.samples.services.service.HelloSampleLocalService helloSampleLocalService;
    @BeanReference(type = com.liferay.samples.services.service.HelloSampleService.class)
    protected com.liferay.samples.services.service.HelloSampleService helloSampleService;
    @BeanReference(type = HelloSamplePersistence.class)
    protected HelloSamplePersistence helloSamplePersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private HelloSampleLocalServiceClpInvoker _clpInvoker = new HelloSampleLocalServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link com.liferay.samples.services.service.HelloSampleLocalServiceUtil} to access the hello sample local service.
     */

    /**
     * Adds the hello sample to the database. Also notifies the appropriate model listeners.
     *
     * @param helloSample the hello sample
     * @return the hello sample that was added
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public HelloSample addHelloSample(HelloSample helloSample)
        throws SystemException {
        helloSample.setNew(true);

        return helloSamplePersistence.update(helloSample);
    }

    /**
     * Creates a new hello sample with the primary key. Does not add the hello sample to the database.
     *
     * @param sampleId the primary key for the new hello sample
     * @return the new hello sample
     */
    @Override
    public HelloSample createHelloSample(long sampleId) {
        return helloSamplePersistence.create(sampleId);
    }

    /**
     * Deletes the hello sample with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param sampleId the primary key of the hello sample
     * @return the hello sample that was removed
     * @throws PortalException if a hello sample with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public HelloSample deleteHelloSample(long sampleId)
        throws PortalException, SystemException {
        return helloSamplePersistence.remove(sampleId);
    }

    /**
     * Deletes the hello sample from the database. Also notifies the appropriate model listeners.
     *
     * @param helloSample the hello sample
     * @return the hello sample that was removed
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public HelloSample deleteHelloSample(HelloSample helloSample)
        throws SystemException {
        return helloSamplePersistence.remove(helloSample);
    }

    @Override
    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(HelloSample.class,
            clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return helloSamplePersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.samples.services.model.impl.HelloSampleModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return helloSamplePersistence.findWithDynamicQuery(dynamicQuery, start,
            end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.samples.services.model.impl.HelloSampleModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return helloSamplePersistence.findWithDynamicQuery(dynamicQuery, start,
            end, orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return helloSamplePersistence.countWithDynamicQuery(dynamicQuery);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @param projection the projection to apply to the query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery,
        Projection projection) throws SystemException {
        return helloSamplePersistence.countWithDynamicQuery(dynamicQuery,
            projection);
    }

    @Override
    public HelloSample fetchHelloSample(long sampleId)
        throws SystemException {
        return helloSamplePersistence.fetchByPrimaryKey(sampleId);
    }

    /**
     * Returns the hello sample with the primary key.
     *
     * @param sampleId the primary key of the hello sample
     * @return the hello sample
     * @throws PortalException if a hello sample with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public HelloSample getHelloSample(long sampleId)
        throws PortalException, SystemException {
        return helloSamplePersistence.findByPrimaryKey(sampleId);
    }

    @Override
    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return helloSamplePersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns a range of all the hello samples.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.samples.services.model.impl.HelloSampleModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param start the lower bound of the range of hello samples
     * @param end the upper bound of the range of hello samples (not inclusive)
     * @return the range of hello samples
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<HelloSample> getHelloSamples(int start, int end)
        throws SystemException {
        return helloSamplePersistence.findAll(start, end);
    }

    /**
     * Returns the number of hello samples.
     *
     * @return the number of hello samples
     * @throws SystemException if a system exception occurred
     */
    @Override
    public int getHelloSamplesCount() throws SystemException {
        return helloSamplePersistence.countAll();
    }

    /**
     * Updates the hello sample in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param helloSample the hello sample
     * @return the hello sample that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public HelloSample updateHelloSample(HelloSample helloSample)
        throws SystemException {
        return helloSamplePersistence.update(helloSample);
    }

    /**
     * Returns the hello sample local service.
     *
     * @return the hello sample local service
     */
    public com.liferay.samples.services.service.HelloSampleLocalService getHelloSampleLocalService() {
        return helloSampleLocalService;
    }

    /**
     * Sets the hello sample local service.
     *
     * @param helloSampleLocalService the hello sample local service
     */
    public void setHelloSampleLocalService(
        com.liferay.samples.services.service.HelloSampleLocalService helloSampleLocalService) {
        this.helloSampleLocalService = helloSampleLocalService;
    }

    /**
     * Returns the hello sample remote service.
     *
     * @return the hello sample remote service
     */
    public com.liferay.samples.services.service.HelloSampleService getHelloSampleService() {
        return helloSampleService;
    }

    /**
     * Sets the hello sample remote service.
     *
     * @param helloSampleService the hello sample remote service
     */
    public void setHelloSampleService(
        com.liferay.samples.services.service.HelloSampleService helloSampleService) {
        this.helloSampleService = helloSampleService;
    }

    /**
     * Returns the hello sample persistence.
     *
     * @return the hello sample persistence
     */
    public HelloSamplePersistence getHelloSamplePersistence() {
        return helloSamplePersistence;
    }

    /**
     * Sets the hello sample persistence.
     *
     * @param helloSamplePersistence the hello sample persistence
     */
    public void setHelloSamplePersistence(
        HelloSamplePersistence helloSamplePersistence) {
        this.helloSamplePersistence = helloSamplePersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();

        PersistedModelLocalServiceRegistryUtil.register("com.liferay.samples.services.model.HelloSample",
            helloSampleLocalService);
    }

    public void destroy() {
        PersistedModelLocalServiceRegistryUtil.unregister(
            "com.liferay.samples.services.model.HelloSample");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return HelloSample.class;
    }

    protected String getModelClassName() {
        return HelloSample.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = helloSamplePersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
