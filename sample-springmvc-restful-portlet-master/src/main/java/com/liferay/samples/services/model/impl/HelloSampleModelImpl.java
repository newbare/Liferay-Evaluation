package com.liferay.samples.services.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.liferay.samples.services.model.HelloSample;
import com.liferay.samples.services.model.HelloSampleModel;
import com.liferay.samples.services.model.HelloSampleSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the HelloSample service. Represents a row in the &quot;SAMPLES_HelloSample&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.samples.services.model.HelloSampleModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link HelloSampleImpl}.
 * </p>
 *
 * @author Liferay
 * @see HelloSampleImpl
 * @see com.liferay.samples.services.model.HelloSample
 * @see com.liferay.samples.services.model.HelloSampleModel
 * @generated
 */
@JSON(strict = true)
public class HelloSampleModelImpl extends BaseModelImpl<HelloSample>
    implements HelloSampleModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a hello sample model instance should use the {@link com.liferay.samples.services.model.HelloSample} interface instead.
     */
    public static final String TABLE_NAME = "SAMPLES_HelloSample";
    public static final Object[][] TABLE_COLUMNS = {
            { "sampleId", Types.BIGINT },
            { "sampleName", Types.VARCHAR },
            { "sampleAddress", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table SAMPLES_HelloSample (sampleId LONG not null primary key,sampleName VARCHAR(75) null,sampleAddress VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table SAMPLES_HelloSample";
    public static final String ORDER_BY_JPQL = " ORDER BY helloSample.sampleId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY SAMPLES_HelloSample.sampleId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.liferay.samples.services.model.HelloSample"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.liferay.samples.services.model.HelloSample"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.liferay.samples.services.model.HelloSample"));
    private static ClassLoader _classLoader = HelloSample.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            HelloSample.class
        };
    private long _sampleId;
    private String _sampleName;
    private String _sampleAddress;
    private HelloSample _escapedModel;

    public HelloSampleModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static HelloSample toModel(HelloSampleSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        HelloSample model = new HelloSampleImpl();

        model.setSampleId(soapModel.getSampleId());
        model.setSampleName(soapModel.getSampleName());
        model.setSampleAddress(soapModel.getSampleAddress());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<HelloSample> toModels(HelloSampleSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<HelloSample> models = new ArrayList<HelloSample>(soapModels.length);

        for (HelloSampleSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _sampleId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setSampleId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _sampleId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return HelloSample.class;
    }

    @Override
    public String getModelClassName() {
        return HelloSample.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("sampleId", getSampleId());
        attributes.put("sampleName", getSampleName());
        attributes.put("sampleAddress", getSampleAddress());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long sampleId = (Long) attributes.get("sampleId");

        if (sampleId != null) {
            setSampleId(sampleId);
        }

        String sampleName = (String) attributes.get("sampleName");

        if (sampleName != null) {
            setSampleName(sampleName);
        }

        String sampleAddress = (String) attributes.get("sampleAddress");

        if (sampleAddress != null) {
            setSampleAddress(sampleAddress);
        }
    }

    @JSON
    @Override
    public long getSampleId() {
        return _sampleId;
    }

    @Override
    public void setSampleId(long sampleId) {
        _sampleId = sampleId;
    }

    @JSON
    @Override
    public String getSampleName() {
        if (_sampleName == null) {
            return StringPool.BLANK;
        } else {
            return _sampleName;
        }
    }

    @Override
    public void setSampleName(String sampleName) {
        _sampleName = sampleName;
    }

    @JSON
    @Override
    public String getSampleAddress() {
        if (_sampleAddress == null) {
            return StringPool.BLANK;
        } else {
            return _sampleAddress;
        }
    }

    @Override
    public void setSampleAddress(String sampleAddress) {
        _sampleAddress = sampleAddress;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            HelloSample.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public HelloSample toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (HelloSample) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        HelloSampleImpl helloSampleImpl = new HelloSampleImpl();

        helloSampleImpl.setSampleId(getSampleId());
        helloSampleImpl.setSampleName(getSampleName());
        helloSampleImpl.setSampleAddress(getSampleAddress());

        helloSampleImpl.resetOriginalValues();

        return helloSampleImpl;
    }

    @Override
    public int compareTo(HelloSample helloSample) {
        long primaryKey = helloSample.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof HelloSample)) {
            return false;
        }

        HelloSample helloSample = (HelloSample) obj;

        long primaryKey = helloSample.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<HelloSample> toCacheModel() {
        HelloSampleCacheModel helloSampleCacheModel = new HelloSampleCacheModel();

        helloSampleCacheModel.sampleId = getSampleId();

        helloSampleCacheModel.sampleName = getSampleName();

        String sampleName = helloSampleCacheModel.sampleName;

        if ((sampleName != null) && (sampleName.length() == 0)) {
            helloSampleCacheModel.sampleName = null;
        }

        helloSampleCacheModel.sampleAddress = getSampleAddress();

        String sampleAddress = helloSampleCacheModel.sampleAddress;

        if ((sampleAddress != null) && (sampleAddress.length() == 0)) {
            helloSampleCacheModel.sampleAddress = null;
        }

        return helloSampleCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(7);

        sb.append("{sampleId=");
        sb.append(getSampleId());
        sb.append(", sampleName=");
        sb.append(getSampleName());
        sb.append(", sampleAddress=");
        sb.append(getSampleAddress());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(13);

        sb.append("<model><model-name>");
        sb.append("com.liferay.samples.services.model.HelloSample");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>sampleId</column-name><column-value><![CDATA[");
        sb.append(getSampleId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sampleName</column-name><column-value><![CDATA[");
        sb.append(getSampleName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sampleAddress</column-name><column-value><![CDATA[");
        sb.append(getSampleAddress());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
